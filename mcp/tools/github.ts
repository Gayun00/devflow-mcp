import { Octokit } from "@octokit/rest";
import { exec } from "child_process";
import { promisify } from "util";

const execAsync = promisify(exec);

export async function findOrCreatePr({ issueId }: { issueId: string }) {
  const token = process.env.GITHUB_TOKEN!;
  const repoInfo = process.env.GITHUB_REPO!;
  const base = process.env.GITHUB_BASE || "main";
  const [owner, repo] = repoInfo.split("/");
  const octokit = new Octokit({ auth: token });

  // ✅ 현재 브랜치명 가져오기
  const { stdout: currentBranch } = await execAsync(
    `git rev-parse --abbrev-ref HEAD`
  );
  const branch = currentBranch.trim();

  // ✅ 원격 브랜치 존재 여부 확인
  const { stdout: lsRemote } = await execAsync(
    `git ls-remote --heads origin ${branch}`
  );
  const branchExists = lsRemote.includes(branch);

  if (!branchExists) {
    return {
      status: "BRANCH_NOT_FOUND",
      message: `❗ 현재 브랜치 '${branch}'는 원격 저장소에 없습니다. 먼저 push 해주세요: git push origin HEAD:${branch}`,
    };
  }

  // PR 존재 확인
  const prs = await octokit.pulls.list({
    owner,
    repo,
    head: `${owner}:${branch}`,
    state: "open",
  });

  const title = `${issueId}: WIP`;
  const body = `This PR was generated by devflow-mcp.`;

  if (prs.data.length > 0) {
    const existingPr = prs.data[0];
    await octokit.pulls.update({
      owner,
      repo,
      pull_number: existingPr.number,
      title,
      body,
    });

    return { status: "UPDATED", url: existingPr.html_url };
  }

  const pr = await octokit.pulls.create({
    owner,
    repo,
    head: branch,
    base,
    title,
    body,
  });

  return { status: "CREATED", url: pr.data.html_url };
}
